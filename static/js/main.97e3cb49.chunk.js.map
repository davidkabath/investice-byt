{"version":3,"sources":["header/Header.js","inputForm/ErrorMessage.js","inputForm/Legend.js","inputForm/InputForm.js","results/ResultsTableBody.js","results/ResultsTableHeader.js","results/ResultsTable.js","results/Results.js","utils/Math.js","App.js","index.js"],"names":["Header","Container","fluid","className","ErrorMessage","props","Form","Control","Feedback","type","text","Legend","Alert","variant","Heading","target","rel","href","style","textAlign","InputForm","useForm","mode","register","handleSubmit","formState","setValue","getValues","errors","clearErrors","mortgageEnabled","useDefaultInput","useDefaultFormInput","defaultInput","defaultFormInput","useState","mortgageValues","saveMortgageValues","showDisclaimer","setShowDisclaimer","integerPattern","decimalPattern","Link","onClick","onSubmit","data","noValidate","Group","as","Row","Label","column","sm","Col","InputGroup","placeholder","investmentPeriod","name","ref","required","min","max","pattern","validate","value","defaultValue","propertyCost","Append","Text","initialMaintenance","monthlyRent","monthlyExpenses","emptyMonths","maxLength","homeMaintenance","valueDevelopment","Check","inline","checked","onChange","event","mortgageValue","mortgagePeriod","mortgageInterest","toggleMortgage","disabled","readOnly","Button","isSubmitting","ResultsTableRow","row","rowData","map","item","index","key","bold","ResultsTableBody","rows","tableData","ResultsTableHeader","SummaryTable","tablesData","monthlyMortgagePayment","monthlyNetRevenue","descriptionsAndValues","description","descriptionsAndValuesOnlyMortgage","concat","ResultsTable","rentInvestmentPeriodTable","Table","responsive","bordered","striped","hover","headerData","Results","dataLoaded","Object","keys","this","results","length","tableRef","Accordion","activeKey","Card","Toggle","eventKey","Collapse","Body","Component","computeMonthlyMortgagePayment","inputData","yearlyInterest","parseFloat","parseInt","computeMonthlyNetRevenue","undefined","prepareCashflow","cashflow","Array","initialInvestment","yearlyCashFlowMortgage","propertyValueIncreased","fill","push","getNPV","irr","reduce","acc","val","i","Math","pow","computeIRR","guess","multiplier","getRentInvestmentPeriodTable","table","investmentPeriodSet","Set","monthlyRentTop","Number","toFixed","add","from","roundResults","resultsState","App","setResults","setMortgageEnabled","mortgage","computeInvestmentResults","ReactDOM","render","document","getElementById"],"mappings":"iPAYeA,EATA,WACb,OACE,kBAACC,EAAA,EAAD,CAAWC,OAAK,EAACC,UAAU,UACzB,yBAAKA,UAAU,gBAAf,iCACA,yBAAKA,UAAU,gBAAf,wC,wDCISC,EARM,SAACC,GACpB,OACE,kBAACC,EAAA,EAAKC,QAAQC,SAAd,CAAuBL,UAAU,iBAAiBM,KAAK,WACpDJ,EAAMK,OCiFEC,EAnFA,SAACN,GACd,OACE,kBAACO,EAAA,EAAD,CAAOC,QAAQ,SAASV,UAAU,mBAChC,kBAACS,EAAA,EAAME,QAAP,yBADF,YAGE,4BACE,iHAJJ,aAUE,4BACE,2FACA,4MAIA,8HACA,uMAIA,iSAKA,sOAKA,gMA/BJ,cAsCE,4BACE,6EACA,mGACA,uFAEF,kBAACF,EAAA,EAAME,QAAP,8BACA,4BACE,oVAMA,sGACmD,wCADnD,8BAE0B,wCAF1B,yDAKA,mMAIA,0NAEiE,IAC/D,uBACEC,OAAO,SACPC,IAAI,sBACJC,KAAK,gDAHP,OAHF,MAaF,yBAAKC,MAAO,CAAEC,UAAW,WAAzB,gICqXSC,EAtbG,SAACf,GAAW,IAAD,EASvBgB,YAAQ,CACVC,KAAM,aARNC,EAFyB,EAEzBA,SACAC,EAHyB,EAGzBA,aACAC,EAJyB,EAIzBA,UACAC,EALyB,EAKzBA,SACAC,EANyB,EAMzBA,UACAC,EAPyB,EAOzBA,OACAC,EARyB,EAQzBA,YAIIC,EAAkBzB,EAAMyB,gBACxBC,EAAkB1B,EAAM2B,oBACxBC,EAAe5B,EAAM6B,iBAdA,EAgBkBC,qBAhBlB,mBAgBpBC,EAhBoB,KAgBJC,EAhBI,OAiBiBF,oBAAS,GAjB1B,mBAiBpBG,EAjBoB,KAiBJC,EAjBI,KAyCrBC,EAAiB,WACjBC,EAAiB,mBAEvB,OACE,kBAACxC,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACU,EAAA,EAAD,CAAOT,UAAU,oBACf,kBAACS,EAAA,EAAM8B,KAAP,CACEvC,UAAU,uBACVc,KAAK,IACL0B,QAAS,kBAAMJ,GAAmBD,KAEjCA,EAAiB,WAAU,WAL9B,8CAQF,kBAACrC,EAAA,EAAD,CAAWE,UAAU,UACnB,yBAAKA,UAAU,8BACZmC,GAAkB,kBAAC,EAAD,MADrB,IAEE,kBAAChC,EAAA,EAAD,CAAMH,UAAU,OAAOyC,SAAUpB,GArBxB,SAACqB,GAChBxC,EAAMuC,SAASC,MAoBgDC,YAAU,GACjE,yBAAK3C,UAAU,oBACb,0CAEF,kBAACG,EAAA,EAAKyC,MAAN,CAAYC,GAAIC,KACd,kBAAC3C,EAAA,EAAK4C,MAAN,CAAYC,QAAM,EAACC,GAAI,GAAvB,yCAGA,kBAACC,EAAA,EAAD,CAAKD,GAAI,GACP,kBAACE,EAAA,EAAD,KACE,kBAAChD,EAAA,EAAKC,QAAN,CACEE,KAAK,SACL8C,YAAatB,EAAauB,iBAC1BC,KAAK,mBACLC,IAAKnC,EAAS,CACZoC,UAAU,EACVC,IAAK,EACLC,IAAK,GACLC,QAAStB,EACTuB,SAAU,SAACC,GACT,OAAOA,GAASrC,IAAS,kBAG7BsC,aACElC,EAAkBE,EAAauB,iBAAmB,KAGrD5B,EAAO4B,iBACN,kBAAC,EAAD,CAAc9C,KAAK,yCAEnB,MAKR,yBAAKP,UAAU,oBACb,2CAEF,kBAACG,EAAA,EAAKyC,MAAN,CAAYC,GAAIC,KACd,kBAAC3C,EAAA,EAAK4C,MAAN,CAAYC,QAAM,EAACC,GAAI,GAAvB,oBAGA,kBAACC,EAAA,EAAD,CAAKD,GAAI,GACP,kBAACE,EAAA,EAAD,KACE,kBAAChD,EAAA,EAAKC,QAAN,CACEE,KAAK,SACL8C,YAAatB,EAAaiC,aAC1BT,KAAK,eACLC,IAAKnC,EAAS,CACZoC,UAAU,EACVC,IAAK,IACLC,IAAK,IACLC,QAAStB,IAEXyB,aACElC,EAAkBE,EAAaiC,aAAe,KAGlD,kBAACZ,EAAA,EAAWa,OAAZ,KACE,kBAACb,EAAA,EAAWc,KAAZ,iBAEDxC,EAAOsC,aACN,kBAAC,EAAD,CAAcxD,KAAK,iCAEnB,MAKR,kBAACJ,EAAA,EAAKyC,MAAN,CAAYC,GAAIC,KACd,kBAAC3C,EAAA,EAAK4C,MAAN,CAAYC,QAAM,EAACC,GAAI,GAAvB,+CAGA,kBAACC,EAAA,EAAD,CAAKD,GAAI,GACP,kBAACE,EAAA,EAAD,KACE,kBAAChD,EAAA,EAAKC,QAAN,CACEE,KAAK,SACL8C,YAAatB,EAAaoC,mBAC1BZ,KAAK,qBACLC,IAAKnC,EAAS,CACZoC,UAAU,EACVC,IAAK,EACLC,IAAK,IACLC,QAAStB,IAEXyB,aACElC,EAAkBE,EAAaoC,mBAAqB,KAGxD,kBAACf,EAAA,EAAWa,OAAZ,KACE,kBAACb,EAAA,EAAWc,KAAZ,iBAEDxC,EAAOyC,mBACN,kBAAC,EAAD,CAAc3D,KAAK,0BAEnB,MAKR,kBAACJ,EAAA,EAAKyC,MAAN,CAAYC,GAAIC,KACd,kBAAC3C,EAAA,EAAK4C,MAAN,CAAYC,QAAM,EAACC,GAAI,GAAvB,oCAGA,kBAACC,EAAA,EAAD,CAAKD,GAAI,GACP,kBAACE,EAAA,EAAD,KACE,kBAAChD,EAAA,EAAKC,QAAN,CACEE,KAAK,SACL8C,YAAatB,EAAaqC,YAC1Bb,KAAK,cACLC,IAAKnC,EAAS,CACZoC,UAAU,EACVC,IAAK,IACLC,IAAK,IACLC,QAAStB,IAEXyB,aACElC,EAAkBE,EAAaqC,YAAc,KAGjD,kBAAChB,EAAA,EAAWa,OAAZ,KACE,kBAACb,EAAA,EAAWc,KAAZ,iBAEDxC,EAAO0C,YACN,kBAAC,EAAD,CAAc5D,KAAK,2BAEnB,MAKR,kBAACJ,EAAA,EAAKyC,MAAN,CAAYC,GAAIC,KACd,kBAAC3C,EAAA,EAAK4C,MAAN,CAAYC,QAAM,EAACC,GAAI,GAAvB,6DAGA,kBAACC,EAAA,EAAD,CAAKD,GAAI,GACP,kBAACE,EAAA,EAAD,KACE,kBAAChD,EAAA,EAAKC,QAAN,CACEE,KAAK,SACL8C,YAAatB,EAAasC,gBAC1Bd,KAAK,kBACLC,IAAKnC,EAAS,CACZoC,UAAU,EACVC,IAAK,EACLC,IAAK,GACLC,QAAStB,IAEXyB,aACElC,EAAkBE,EAAasC,gBAAkB,KAGrD,kBAACjB,EAAA,EAAWa,OAAZ,KACE,kBAACb,EAAA,EAAWc,KAAZ,WAEDxC,EAAO2C,gBACN,kBAAC,EAAD,CAAc7D,KAAK,aAEnB,MAKR,kBAACJ,EAAA,EAAKyC,MAAN,CAAYC,GAAIC,KACd,kBAAC3C,EAAA,EAAK4C,MAAN,CAAYC,QAAM,EAACC,GAAI,GAAvB,0EAGA,kBAACC,EAAA,EAAD,CAAKD,GAAI,GACP,kBAAC9C,EAAA,EAAKC,QAAN,CACEE,KAAK,SACL8C,YAAatB,EAAauC,YAC1Bf,KAAK,cACLC,IAAKnC,EAAS,CACZoC,UAAU,EACVC,IAAK,EACLC,IAAK,EACLY,UAAW,EACXX,QAASrB,IAEXwB,aAAclC,EAAkBE,EAAauC,YAAc,KAE5D5C,EAAO4C,YAAc,kBAAC,EAAD,CAAc9D,KAAK,gBAAmB,KAGhE,kBAACJ,EAAA,EAAKyC,MAAN,CAAYC,GAAIC,KACd,kBAAC3C,EAAA,EAAK4C,MAAN,CAAYC,QAAM,EAACC,GAAI,GAAvB,+CAGA,kBAACC,EAAA,EAAD,CAAKD,GAAI,GACP,kBAACE,EAAA,EAAD,KACE,kBAAChD,EAAA,EAAKC,QAAN,CACEE,KAAK,SACL8C,YAAatB,EAAayC,gBAC1BjB,KAAK,kBACLC,IAAKnC,EAAS,CACZoC,UAAU,EACVC,IAAK,EACLC,IAAK,IACLC,QAAStB,IAEXyB,aACElC,EAAkBE,EAAayC,gBAAkB,KAGrD,kBAACpB,EAAA,EAAWa,OAAZ,KACE,kBAACb,EAAA,EAAWc,KAAZ,iBAEDxC,EAAO8C,gBACN,kBAAC,EAAD,CAAchE,KAAK,uBAEnB,MAKR,kBAACJ,EAAA,EAAKyC,MAAN,CAAYC,GAAIC,KACd,kBAAC3C,EAAA,EAAK4C,MAAN,CAAYC,QAAM,EAACC,GAAI,GAAvB,uEAGA,kBAACC,EAAA,EAAD,CAAKD,GAAI,GACP,kBAACE,EAAA,EAAD,KACE,kBAAChD,EAAA,EAAKC,QAAN,CACEE,KAAK,SACL8C,YAAatB,EAAa0C,iBAC1BlB,KAAK,mBACLC,IAAKnC,EAAS,CACZoC,UAAU,EACVC,KAAM,IACNC,IAAK,IACLC,QAAStB,IAEXyB,aACElC,EAAkBE,EAAa0C,iBAAmB,KAGtD,kBAACrB,EAAA,EAAWa,OAAZ,KACE,kBAACb,EAAA,EAAWc,KAAZ,WAEDxC,EAAO+C,iBACN,kBAAC,EAAD,CAAcjE,KAAK,iBAEnB,MAKR,yBAAKP,UAAU,oBACb,0CACW,IACT,kBAACG,EAAA,EAAKsE,MAAN,CACEC,QAAM,EACNpE,KAAK,WACLgD,KAAK,WACLqB,QAAShD,EACT4B,IAAKnC,EACLwD,SArSO,SAACC,GACjBA,EAAMjE,OAAO+D,SAUhBpD,EAAS,gBAAiBU,EAAe6C,eACzCvD,EAAS,iBAAkBU,EAAe8C,gBAC1CxD,EAAS,mBAAoBU,EAAe+C,oBAX5C9C,EACEV,EAAU,CAAC,gBAAiB,iBAAkB,sBAGhDE,EAAY,CAAC,gBAAiB,iBAAkB,qBAChDH,EAAS,gBAAiB,IAC1BA,EAAS,iBAAkB,IAC3BA,EAAS,mBAAoB,KAM/BrB,EAAM+E,eAAeJ,QA2Rb,kBAAC1E,EAAA,EAAKyC,MAAN,CAAYC,GAAIC,KACd,kBAAC3C,EAAA,EAAK4C,MAAN,CAAYC,QAAM,EAACC,GAAI,GAAvB,gBAGA,kBAACC,EAAA,EAAD,CAAKD,GAAI,GACP,kBAACE,EAAA,EAAD,KACE,kBAAChD,EAAA,EAAKC,QAAN,CACEE,KAAK,SACL8C,YACEzB,EAAkBG,EAAagD,cAAgB,GAEjDxB,KAAK,gBACLC,IAAKnC,EAAS,CACZoC,SAAU7B,EACV8B,IAAK,IACLC,IAAK,IACLC,QAAStB,EACTuB,SAAU,SAACC,GACT,OAAOA,GAASrC,IAAS,gBAG7B0D,UAAWvD,EACXmC,aACElC,EAAkBE,EAAagD,cAAgB,KAGnD,kBAAC3B,EAAA,EAAWa,OAAZ,KACE,kBAACb,EAAA,EAAWc,KAAZ,iBAEDxC,EAAOqD,eAAiBnD,EACvB,kBAAC,EAAD,CAAcpB,KAAK,uDAEnB,MAMR,kBAACJ,EAAA,EAAKyC,MAAN,CAAYC,GAAIC,KACd,kBAAC3C,EAAA,EAAK4C,MAAN,CAAYC,QAAM,EAACC,GAAI,GAAvB,0CAGA,kBAACC,EAAA,EAAD,CAAKD,GAAI,GACP,kBAAC9C,EAAA,EAAKC,QAAN,CACEE,KAAK,SACL8C,YACEzB,EAAkBG,EAAaiD,eAAiB,GAElDzB,KAAK,iBACLC,IAAKnC,EAAS,CACZoC,SAAU7B,EACV8B,IAAK,EACLC,IAAK,GACLC,QAAStB,IAEX8C,UAAWxD,EACXuD,UAAWvD,EACXmC,aACElC,EAAkBE,EAAaiD,eAAiB,KAGnDtD,EAAOsD,gBAAkBpD,EACxB,kBAAC,EAAD,CAAcpB,KAAK,eAEnB,KAIN,kBAACJ,EAAA,EAAKyC,MAAN,CAAYC,GAAIC,KACd,kBAAC3C,EAAA,EAAK4C,MAAN,CAAYC,QAAM,EAACC,GAAI,GAAvB,gBAGA,kBAACC,EAAA,EAAD,CAAKD,GAAI,GACP,kBAACE,EAAA,EAAD,KACE,kBAAChD,EAAA,EAAKC,QAAN,CACEE,KAAK,SACL8C,YACEzB,EAAkBG,EAAakD,iBAAmB,GAEpD1B,KAAK,mBACLC,IAAKnC,EAAS,CACZoC,SAAU7B,EACV8B,IAAK,GACLC,IAAK,GACLY,UAAW,EACXX,QAASrB,IAEX6C,UAAWxD,EACXuD,UAAWvD,EACXmC,aACElC,EAAkBE,EAAakD,iBAAmB,KAGtD,kBAAC7B,EAAA,EAAWa,OAAZ,KACE,kBAACb,EAAA,EAAWc,KAAZ,WAEDxC,EAAOuD,kBAAoBrD,EAC1B,kBAAC,EAAD,CAAcpB,KAAK,mBAEnB,MAMR,yBAAKP,UAAU,eACb,kBAACoF,EAAA,EAAD,CACE1E,QAAQ,OACRJ,KAAK,SACL4E,SAAU5D,EAAU+D,cAHtB,2B,wDCnbRC,EAAkB,SAACpF,GACvB,IAAMqF,EAAMrF,EAAMsF,QAAQC,KAAI,SAACC,EAAMC,GACnC,OACE,wBAAIC,IAAKD,EAAO3F,UAAW,gBACxB0F,EADH,QAKJ,OACE,wBACEE,IAAK1F,EAAMiE,YACXnE,UAAW,sBAAwBE,EAAM2F,KAAO,mBAAqB,KAErE,wBAAI7F,UAAW,kCACZE,EAAMiE,YADT,eAGCoB,IAoBQO,EAfU,SAAC5F,GACxB,IAAM6F,EAAO7F,EAAM8F,UAAUP,KAAI,SAACF,EAAKI,GACrC,OACE,kBAAC,EAAD,CACEC,IAAK1F,EAAMiE,YAAYwB,GACvBH,QAASD,EACTpB,YAAajE,EAAMiE,YAAYwB,GAC/BE,KAAgB,IAAVF,OAKZ,OAAO,+BAAQI,ICtBFE,EAXY,SAAC/F,GAC1B,OACE,+BACE,wBAAIF,UAAU,kDACZ,wBAAIA,UAAU,uBAAd,oCACA,wBAAIA,UAAU,uBAAd,4CCFFkG,EAAe,SAAChG,GAAW,IAAD,EAE5BA,EAAMiG,WADAC,EADsB,EACtBA,uBAAwBC,EADF,EACEA,kBAAmBtB,EADrB,EACqBA,eAI/CuB,EAAwB,CAC1B,CACEC,YAAa,oEACb1C,MAAOwC,EAAoB,aAIzBG,EAAoC,CACxC,CACED,YAAa,mDACb1C,MAAOuC,EAAyB,oBAAiBrB,EAAiB,QAEpE,CACEwB,YAAa,oDACb1C,MAhByBuC,EAAyBC,EAgBpB,oBAAiBtB,EAAiB,SAI7C,IAAnBA,IACFuB,EAAwBA,EAAsBG,OAC5CD,IAIJ,IAAMT,EAAOO,EAAsBb,KAAI,SAACF,EAAKI,GAC3C,OACE,wBAAIC,IAAKD,GACP,wBAAI3F,UAAU,gBAAgBuF,EAAIgB,aAClC,wBAAIvG,UAAU,gBAAgBuF,EAAI1B,WAKxC,OAAO,+BAAQkC,IAwBFW,EArBM,SAACxG,GAAW,IACvByG,EAA8BzG,EAAMiG,WAApCQ,0BAER,OACE,6BACE,kBAACC,EAAA,EAAD,CAAOC,YAAU,GACf,kBAAC,EAAD,CAAcV,WAAYjG,EAAMiG,cAElC,kBAACS,EAAA,EAAD,CAAOE,UAAQ,EAACC,SAAO,EAACC,OAAK,EAACH,YAAU,GACtC,kBAAC,EAAD,CACEI,WAAYN,EAA0BtD,mBAExC,kBAAC,EAAD,CACE2C,UAAWW,EAA0BjE,KACrCyB,YAAawC,EAA0BxC,iBCxBlC+C,E,uKA9BX,IAAMC,EAAwD,IAA3CC,OAAOC,KAAKC,KAAKpH,MAAMqH,SAASC,OAEnD,OACE,kBAAC1H,EAAA,EAAD,CAAWE,UAAU,UAAUuD,IAAK+D,KAAKG,UACvC,yBAAKzH,UAAU,0BACb,kBAAC0H,EAAA,EAAD,CACE1H,UAAU,cACV2H,UAAWR,EAAa,SAAW,IAEnC,kBAACS,EAAA,EAAD,KACE,kBAACF,EAAA,EAAUG,OAAX,CAAkBhF,GAAI+E,IAAK/H,OAAQiI,SAAS,UAC1C,2CAEF,kBAACJ,EAAA,EAAUK,SAAX,CAAoBD,SAAS,UAC3B,kBAACF,EAAA,EAAKI,KAAN,KACGb,EACC,kBAAC,EAAD,CAAchB,WAAYmB,KAAKpH,MAAMqH,UAErC,a,GApBEU,aC+BTC,EAAgC,SAACC,GAC5C,IAAMC,EAAiBC,WAAWF,EAAUnD,kBAAoB,IAAM,GAChED,EAA0D,GAAzCuD,SAASH,EAAUpD,eAAgB,IAG1D,OAFsBuD,SAASH,EAAUrD,cAAe,IAGzC,SACZ,EAAIsD,EAAmBrD,IACvBqD,GAAkB,SAAC,EAAIA,EAAmBrD,GAAiB,KAK1DwD,EAA2B,SAACJ,EAAWhE,QACvBqE,IAAhBrE,IACFA,EAAcmE,SAASH,EAAUhE,YAAa,KAEhD,IAAME,EAAcgE,WAAWF,EAAU9D,YAAa,IAChDE,EAAkB+D,SAASH,EAAU5D,gBAAiB,IACtDH,EAAkBkE,SAASH,EAAU/D,gBAAiB,IAAM,IAElE,OACGD,GAAe,GAAKE,GACnBE,EACc,GAAdJ,EAAmBC,EAKjB,KAJDD,GAAe,GAAKE,GACL,GAAdF,EAAmBC,EACnBG,EACA,QAEJ,IAMEkE,EAAkB,SACtBN,EACA9B,EACAD,EACA/C,GAEA,IAAMqF,EAAW,IAAIC,MAAMtF,GAErBuF,GACHT,EAAUjE,oBACViE,EAAUpE,aAAeoE,EAAUrD,eAEhC+D,EACJ,IAAMxC,EAAoBD,GAEtB0C,EACJT,WAAWF,EAAUpE,eAAiB,EAAIoE,EAAU3D,iBAAmB,KAezE,OAbAkE,EAASK,KAAKH,EAAmB,EAAG,GACpCF,EAASK,KAAKF,EAAwB,EAAGV,EAAUpD,eAAiB,GACpE2D,EAASK,KACa,GAApB1C,EACA8B,EAAUpD,eAAiB,EAC3B1B,GAEE8E,EAAUpD,eAAiB1B,EAC7BqF,EAASM,KAAKF,EAAyB,GAAKzC,GAE5CqC,EAASM,KAAKF,EAAyBD,GAGlCH,GAIHO,EAAS,SAACP,EAAUQ,GAAX,OACbR,EAASS,QAAO,SAACC,EAAKC,EAAKC,GAAX,OAAiBF,EAAMC,EAAME,KAAKC,IAAI,EAAIN,EAAKI,KAAI,IAE/DG,EAAa,SAACf,GAMlB,IALA,IAEIgB,EAAQ,IACNC,EAAaV,EAAOP,EAAUgB,GAAS,EAAI,GAAK,EAClDJ,EAAI,EACDA,EALU,KAKI,CAEnB,KAAIK,EADeV,EAAOP,EAAUgB,GALxB,MASL,MAFLA,GAPU,KAODC,EACTL,GAAK,EAIT,OAAOI,GAKHE,EAA+B,SAACzB,EAAW/B,GAQ/C,IAPA,IAAMyD,EAAQ,CACZnH,KAAM,GACNyB,YAAa,GACbd,iBAAkB,IAEdyG,EAAsB,IAAIC,IAC1BC,EAAiB1B,SAASH,EAAUhE,YAAa,IAAM,IAEvDA,EAAcmE,SAASH,EAAUhE,YAAa,IAAM,IACxDA,GAAe6F,EACf7F,GAAe,IACf,CACA,IAAMoB,EAAM,GACZsE,EAAM1F,YAAY6E,KAAK7E,GACvB,IAAMkC,EAAoBkC,EAAyBJ,EAAWhE,GAE1Dd,EAAmBiF,SAASH,EAAU9E,iBAAkB,IACtDqF,EAAWD,EACfN,EACA9B,EACAD,EACA/C,GAEI6F,EAAMO,EAAWf,GAEvBnD,EAAIyD,KAAKiB,OAAa,IAANf,GAAWgB,QAAQ,IACnCJ,EAAoBK,IAAIhC,EAAU9E,kBAElCwG,EAAMnH,KAAKsG,KAAKzD,GAIlB,OAFAsE,EAAMxG,iBAAmBsF,MAAMyB,KAAKN,GAE7BD,GAGIQ,EAAe,SAACC,GAQ3B,OAPAA,EAAalE,uBAAyB6D,OACpCK,EAAalE,wBACb8D,UACFI,EAAajE,kBAAoB4D,OAC/BK,EAAajE,mBACb6D,UAEKI,GCjHMC,G,MAhDH,WAAO,IAAD,EACcvI,mBAAS,IADvB,mBACTuF,EADS,KACAiD,EADA,OAE8BxI,oBAAS,GAFvC,mBAETL,EAFS,KAEQ8I,EAFR,KA+BhB,OACE,kBAAC3K,EAAA,EAAD,CAAWC,OAAK,EAACC,UAAU,kBACzB,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEyC,SAVW,SAAC0F,GAChB,IAAMmC,EDrC8B,SAACnC,GACvC,IAAMmC,EAAe,GA8BrB,OA3BKnC,EAAUuC,SAObJ,EAAalE,uBACX8B,EAA8BC,IAPhCA,EAAUrD,cAAgB,EAC1BqD,EAAUpD,eAAiB,EAC3BoD,EAAUnD,iBAAmB,EAC7BsF,EAAalE,uBAAyB,GAQxCkE,EAAajE,kBAAoBkC,EAAyBJ,GAK1DmC,EAAa3D,0BAA4BiD,EACvCzB,EACAmC,EAAalE,wBAGfkE,EAAavF,eAAiBoD,EAAUpD,eAGxCsF,EAAaC,GAENA,ECMgBK,CAAyBxC,GAE9CqC,EAAWF,IAQPrF,eAfiB,SAACJ,GACtB4F,EAAmB5F,EAAMjE,OAAO+D,UAe5BhD,gBAAiBA,EACjBI,iBA/BmB,CACvBsB,iBAAkB,GAClBU,aAAc,IACdG,mBAAoB,IACpBC,YAAa,KACbC,gBAAiB,GACjBC,YAAa,EACbE,gBAAiB,IACjBC,iBAAkB,GAClBM,cAAe,IACfC,eAAgB,GAChBC,iBAAkB,KAqBdnD,qBAlCsB,IAoCxB,6BACE,kBAAC,EAAD,CAAS0F,QAASA,QChD1BqD,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.97e3cb49.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <Container fluid className=\"header\">\r\n      <div className=\"header-part1\">Investiční nemovitost</div>\r\n      <div className=\"header-part2\">orientační kalkulačka</div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\n\r\nconst ErrorMessage = (props) => {\r\n  return (\r\n    <Form.Control.Feedback className=\"custom-control\" type=\"invalid\">\r\n      {props.text}\r\n    </Form.Control.Feedback>\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import React from \"react\";\r\n\r\nimport { Alert } from \"react-bootstrap\";\r\n\r\nconst Legend = (props) => {\r\n  return (\r\n    <Alert variant=\"danger\" className=\"disclaimer-text\">\r\n      <Alert.Heading>Vysvětlivky</Alert.Heading>\r\n      Investice\r\n      <ul>\r\n        <li>\r\n          Délka investice v celých letech - doba od nákupu po prodej\r\n          nemovitosti.\r\n        </li>\r\n      </ul>\r\n      Nemovitost\r\n      <ul>\r\n        <li>Cena nemovitosti - cena nemovitosti v době koupě.</li>\r\n        <li>\r\n          Počáteční investice - náklady na počáteční rekonstrukci nemovitosti.\r\n          Např. rekonstrukce kuchyně, koupelny nebo nová podlaha.\r\n        </li>\r\n        <li>Měsíční nájem (MN) - nájemné požadované po nájemníkovi.</li>\r\n        <li>\r\n          Měsíční výdaje v procentech k nájmu (MV) - měsíční výdaje na daň z\r\n          nemovitosti, pojištění nemovitosti, apod.\r\n        </li>\r\n        <li>\r\n          Počet měsíců v roce, kdy nebude nemovitost pronajata (PM) - výpadek\r\n          příjmů z nájmu v případě, kdy zůstává nemovitost nepronajata. Např.\r\n          při hledání nového nájemníka, apod.\r\n        </li>\r\n        <li>\r\n          Fond na interní opravy (ročně) (FO) - finance na opravy nemovitosti\r\n          během doby investice. Např. při rekonstrukci kuchyně či jiných\r\n          nezbytných opravách.\r\n        </li>\r\n        <li>\r\n          Nárust/pokles hodnoty nemovitosti za dobu investice v procentech -\r\n          procentuální rozdíl hodnoty nemovitosti na začátku a na konci\r\n          investice.\r\n        </li>\r\n      </ul>\r\n      Hypotéka\r\n      <ul>\r\n        <li>Výše (VH) - výše hypotéky.</li>\r\n        <li>Doba splácení v celých letech (DH) - délka hypotéky.</li>\r\n        <li>Úrok p.a. (UH) - roční úrok hypotéky.</li>\r\n      </ul>\r\n      <Alert.Heading>Popis výpočtu</Alert.Heading>\r\n      <ul>\r\n        <li>\r\n          Čistý měsíční příjem z nájmu (CM) = (MN x (12 - PM) - FO - MN x 12 x\r\n          MV - (MN x (12 - PM) - MN x 12 x MV - FO - 30840) x 0.15) / 12; (0.15\r\n          = 15% = daň z příjmu; 12 = počet měsíců v roce; 30840 Kč = sleva na\r\n          dani na poplatníka (2022)).\r\n        </li>\r\n        <li>\r\n          Měsíční splátka hypotéky (MH) = VH x (1 + UH/12) <sup>DH x 12</sup> x\r\n          ((UH/12) / ((1 + UH/12) <sup>DH x 12</sup> - 1)); (12 = počet měsíců v\r\n          roce).\r\n        </li>\r\n        <li>\r\n          Měsíční doplatek na hypotéku = Měsíční splátka hypotéky - Čistý\r\n          měsíční příjem z nájmu.\r\n        </li>\r\n        <li>\r\n          Čistý výnos investice p.a. = výpočet vnitřní míry návratnosti (ročně).\r\n          Anglicky: Internal Rate of Return (IRR) - více informací např.{\" \"}\r\n          <a\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://www.investopedia.com/terms/i/irr.asp\"\r\n          >\r\n            zde\r\n          </a>\r\n          .\r\n        </li>\r\n      </ul>\r\n      <div style={{ textAlign: \"center\" }}>\r\n        Aplikace má pouze orientační charakter a její autor nenese za správnost\r\n        výpočtu odpovědnost.\r\n      </div>\r\n    </Alert>\r\n  );\r\n};\r\n\r\nexport default Legend;\r\n","import React, { useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport {\r\n  Alert,\r\n  InputGroup,\r\n  Container,\r\n  Form,\r\n  Row,\r\n  Col,\r\n  Button,\r\n} from \"react-bootstrap\";\r\nimport ErrorMessage from \"./ErrorMessage\";\r\nimport Legend from \"./Legend\";\r\n\r\nconst InputForm = (props) => {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState,\r\n    setValue,\r\n    getValues,\r\n    errors,\r\n    clearErrors,\r\n  } = useForm({\r\n    mode: \"onSubmit\", //\"onBlur\", //onChange / onSubmit\r\n  });\r\n  const mortgageEnabled = props.mortgageEnabled;\r\n  const useDefaultInput = props.useDefaultFormInput;\r\n  const defaultInput = props.defaultFormInput;\r\n\r\n  const [mortgageValues, saveMortgageValues] = useState();\r\n  const [showDisclaimer, setShowDisclaimer] = useState(false);\r\n\r\n  const toggleMortgage = (event) => {\r\n    if (!event.target.checked) {\r\n      saveMortgageValues(\r\n        getValues([\"mortgageValue\", \"mortgagePeriod\", \"mortgageInterest\"])\r\n      );\r\n\r\n      clearErrors([\"mortgageValue\", \"mortgagePeriod\", \"mortgageInterest\"]);\r\n      setValue(\"mortgageValue\", \"\");\r\n      setValue(\"mortgagePeriod\", \"\");\r\n      setValue(\"mortgageInterest\", \"\");\r\n    } else {\r\n      setValue(\"mortgageValue\", mortgageValues.mortgageValue);\r\n      setValue(\"mortgagePeriod\", mortgageValues.mortgagePeriod);\r\n      setValue(\"mortgageInterest\", mortgageValues.mortgageInterest);\r\n    }\r\n    props.toggleMortgage(event);\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    props.onSubmit(data);\r\n  };\r\n\r\n  const integerPattern = /^[0-9]*$/;\r\n  const decimalPattern = /^[0-9]*.?[0-9]*$/;\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Alert className=\"disclaimer-strip\">\r\n        <Alert.Link\r\n          className=\"text-reset linkClass\"\r\n          href=\"#\"\r\n          onClick={() => setShowDisclaimer(!showDisclaimer)}\r\n        >\r\n          {showDisclaimer ? \"Skrýt\" : \"Zobrazit\"} vysvětlivky a popis výpočtu\r\n        </Alert.Link>\r\n      </Alert>\r\n      <Container className=\"inputs\">\r\n        <div className=\"row justify-content-center\">\r\n          {showDisclaimer && <Legend />};\r\n          <Form className=\"form\" onSubmit={handleSubmit(onSubmit)} noValidate>\r\n            <div className=\"inputForm-header\">\r\n              <h4>Investice</h4>\r\n            </div>\r\n            <Form.Group as={Row}>\r\n              <Form.Label column sm={8}>\r\n                Délka investice v celých letech\r\n              </Form.Label>\r\n              <Col sm={4}>\r\n                <InputGroup>\r\n                  <Form.Control\r\n                    type=\"number\"\r\n                    placeholder={defaultInput.investmentPeriod}\r\n                    name=\"investmentPeriod\"\r\n                    ref={register({\r\n                      required: true,\r\n                      min: 5,\r\n                      max: 50,\r\n                      pattern: integerPattern,\r\n                      validate: (value) => {\r\n                        return value >= getValues()[\"mortgagePeriod\"];\r\n                      },\r\n                    })}\r\n                    defaultValue={\r\n                      useDefaultInput ? defaultInput.investmentPeriod : \"\"\r\n                    }\r\n                  />\r\n                  {errors.investmentPeriod ? (\r\n                    <ErrorMessage text=\"5 - 50 let a >= délka hypotéky\" />\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </InputGroup>\r\n              </Col>\r\n            </Form.Group>\r\n            <div className=\"inputForm-header\">\r\n              <h4>Nemovitost</h4>\r\n            </div>\r\n            <Form.Group as={Row}>\r\n              <Form.Label column sm={8}>\r\n                Cena nemovitosti\r\n              </Form.Label>\r\n              <Col sm={4}>\r\n                <InputGroup>\r\n                  <Form.Control\r\n                    type=\"number\"\r\n                    placeholder={defaultInput.propertyCost}\r\n                    name=\"propertyCost\"\r\n                    ref={register({\r\n                      required: true,\r\n                      min: 100000,\r\n                      max: 50000000,\r\n                      pattern: integerPattern,\r\n                    })}\r\n                    defaultValue={\r\n                      useDefaultInput ? defaultInput.propertyCost : \"\"\r\n                    }\r\n                  />\r\n                  <InputGroup.Append>\r\n                    <InputGroup.Text>Kč</InputGroup.Text>\r\n                  </InputGroup.Append>\r\n                  {errors.propertyCost ? (\r\n                    <ErrorMessage text=\"100 000 - 50 000 000 Kč\" />\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </InputGroup>\r\n              </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row}>\r\n              <Form.Label column sm={8}>\r\n                Cena počáteční rekonstrukce\r\n              </Form.Label>\r\n              <Col sm={4}>\r\n                <InputGroup>\r\n                  <Form.Control\r\n                    type=\"number\"\r\n                    placeholder={defaultInput.initialMaintenance}\r\n                    name=\"initialMaintenance\"\r\n                    ref={register({\r\n                      required: true,\r\n                      min: 0,\r\n                      max: 5000000,\r\n                      pattern: integerPattern,\r\n                    })}\r\n                    defaultValue={\r\n                      useDefaultInput ? defaultInput.initialMaintenance : \"\"\r\n                    }\r\n                  />\r\n                  <InputGroup.Append>\r\n                    <InputGroup.Text>Kč</InputGroup.Text>\r\n                  </InputGroup.Append>\r\n                  {errors.initialMaintenance ? (\r\n                    <ErrorMessage text=\"0 - 5 000 000 Kč\" />\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </InputGroup>\r\n              </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row}>\r\n              <Form.Label column sm={8}>\r\n                Měsíční nájem\r\n              </Form.Label>\r\n              <Col sm={4}>\r\n                <InputGroup>\r\n                  <Form.Control\r\n                    type=\"number\"\r\n                    placeholder={defaultInput.monthlyRent}\r\n                    name=\"monthlyRent\"\r\n                    ref={register({\r\n                      required: true,\r\n                      min: 1000,\r\n                      max: 100000,\r\n                      pattern: integerPattern,\r\n                    })}\r\n                    defaultValue={\r\n                      useDefaultInput ? defaultInput.monthlyRent : \"\"\r\n                    }\r\n                  />\r\n                  <InputGroup.Append>\r\n                    <InputGroup.Text>Kč</InputGroup.Text>\r\n                  </InputGroup.Append>\r\n                  {errors.monthlyRent ? (\r\n                    <ErrorMessage text=\"1000 - 100 000 Kč\" />\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </InputGroup>\r\n              </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row}>\r\n              <Form.Label column sm={8}>\r\n                Měsíční výdaje v procentech k nájmu\r\n              </Form.Label>\r\n              <Col sm={4}>\r\n                <InputGroup>\r\n                  <Form.Control\r\n                    type=\"number\"\r\n                    placeholder={defaultInput.monthlyExpenses}\r\n                    name=\"monthlyExpenses\"\r\n                    ref={register({\r\n                      required: true,\r\n                      min: 0,\r\n                      max: 30,\r\n                      pattern: integerPattern,\r\n                    })}\r\n                    defaultValue={\r\n                      useDefaultInput ? defaultInput.monthlyExpenses : \"\"\r\n                    }\r\n                  />\r\n                  <InputGroup.Append>\r\n                    <InputGroup.Text>%</InputGroup.Text>\r\n                  </InputGroup.Append>\r\n                  {errors.monthlyExpenses ? (\r\n                    <ErrorMessage text=\"0 - 30 %\" />\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </InputGroup>\r\n              </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row}>\r\n              <Form.Label column sm={8}>\r\n                Počet měsíců v roce, kdy nebude nemovitost pronajata\r\n              </Form.Label>\r\n              <Col sm={4}>\r\n                <Form.Control\r\n                  type=\"number\"\r\n                  placeholder={defaultInput.emptyMonths}\r\n                  name=\"emptyMonths\"\r\n                  ref={register({\r\n                    required: true,\r\n                    min: 0,\r\n                    max: 6,\r\n                    maxLength: 4,\r\n                    pattern: decimalPattern,\r\n                  })}\r\n                  defaultValue={useDefaultInput ? defaultInput.emptyMonths : \"\"}\r\n                />\r\n                {errors.emptyMonths ? <ErrorMessage text=\"0.00 - 6.00\" /> : \"\"}\r\n              </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row}>\r\n              <Form.Label column sm={8}>\r\n                Fond na interní opravy (ročně)\r\n              </Form.Label>\r\n              <Col sm={4}>\r\n                <InputGroup>\r\n                  <Form.Control\r\n                    type=\"number\"\r\n                    placeholder={defaultInput.homeMaintenance}\r\n                    name=\"homeMaintenance\"\r\n                    ref={register({\r\n                      required: true,\r\n                      min: 0,\r\n                      max: 50000,\r\n                      pattern: integerPattern,\r\n                    })}\r\n                    defaultValue={\r\n                      useDefaultInput ? defaultInput.homeMaintenance : \"\"\r\n                    }\r\n                  />\r\n                  <InputGroup.Append>\r\n                    <InputGroup.Text>Kč</InputGroup.Text>\r\n                  </InputGroup.Append>\r\n                  {errors.homeMaintenance ? (\r\n                    <ErrorMessage text=\"0 - 50 000 Kč\" />\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </InputGroup>\r\n              </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row}>\r\n              <Form.Label column sm={8}>\r\n                Nárust/pokles hodnoty nemovitosti za dobu investice v procentech\r\n              </Form.Label>\r\n              <Col sm={4}>\r\n                <InputGroup>\r\n                  <Form.Control\r\n                    type=\"number\"\r\n                    placeholder={defaultInput.valueDevelopment}\r\n                    name=\"valueDevelopment\"\r\n                    ref={register({\r\n                      required: true,\r\n                      min: -100,\r\n                      max: 200,\r\n                      pattern: integerPattern,\r\n                    })}\r\n                    defaultValue={\r\n                      useDefaultInput ? defaultInput.valueDevelopment : \"\"\r\n                    }\r\n                  />\r\n                  <InputGroup.Append>\r\n                    <InputGroup.Text>%</InputGroup.Text>\r\n                  </InputGroup.Append>\r\n                  {errors.valueDevelopment ? (\r\n                    <ErrorMessage text=\"-100 - 200 %\" />\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </InputGroup>\r\n              </Col>\r\n            </Form.Group>\r\n            <div className=\"inputForm-header\">\r\n              <h4>\r\n                Hypotéka{\" \"}\r\n                <Form.Check\r\n                  inline\r\n                  type=\"checkbox\"\r\n                  name=\"mortgage\"\r\n                  checked={mortgageEnabled}\r\n                  ref={register}\r\n                  onChange={toggleMortgage}\r\n                />\r\n              </h4>\r\n            </div>\r\n\r\n            <Form.Group as={Row}>\r\n              <Form.Label column sm={8}>\r\n                Výše\r\n              </Form.Label>\r\n              <Col sm={4}>\r\n                <InputGroup>\r\n                  <Form.Control\r\n                    type=\"number\"\r\n                    placeholder={\r\n                      mortgageEnabled ? defaultInput.mortgageValue : \"\"\r\n                    }\r\n                    name=\"mortgageValue\"\r\n                    ref={register({\r\n                      required: mortgageEnabled,\r\n                      min: 100000,\r\n                      max: 50000000,\r\n                      pattern: integerPattern,\r\n                      validate: (value) => {\r\n                        return value <= getValues()[\"propertyCost\"];\r\n                      },\r\n                    })}\r\n                    disabled={!mortgageEnabled}\r\n                    defaultValue={\r\n                      useDefaultInput ? defaultInput.mortgageValue : \"\"\r\n                    }\r\n                  />\r\n                  <InputGroup.Append>\r\n                    <InputGroup.Text>Kč</InputGroup.Text>\r\n                  </InputGroup.Append>\r\n                  {errors.mortgageValue && mortgageEnabled ? (\r\n                    <ErrorMessage text=\"100 000 - 50 000 000 Kč a <= cena nemovitosti\" />\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </InputGroup>\r\n              </Col>\r\n            </Form.Group>\r\n\r\n            <Form.Group as={Row}>\r\n              <Form.Label column sm={8}>\r\n                Doba splácení v celých letech\r\n              </Form.Label>\r\n              <Col sm={4}>\r\n                <Form.Control\r\n                  type=\"number\"\r\n                  placeholder={\r\n                    mortgageEnabled ? defaultInput.mortgagePeriod : \"\"\r\n                  }\r\n                  name=\"mortgagePeriod\"\r\n                  ref={register({\r\n                    required: mortgageEnabled,\r\n                    min: 5,\r\n                    max: 35,\r\n                    pattern: integerPattern,\r\n                  })}\r\n                  readOnly={!mortgageEnabled}\r\n                  disabled={!mortgageEnabled}\r\n                  defaultValue={\r\n                    useDefaultInput ? defaultInput.mortgagePeriod : \"\"\r\n                  }\r\n                />\r\n                {errors.mortgagePeriod && mortgageEnabled ? (\r\n                  <ErrorMessage text=\"5 - 35 let\" />\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row}>\r\n              <Form.Label column sm={8}>\r\n                Úrok p.a.\r\n              </Form.Label>\r\n              <Col sm={4}>\r\n                <InputGroup>\r\n                  <Form.Control\r\n                    type=\"number\"\r\n                    placeholder={\r\n                      mortgageEnabled ? defaultInput.mortgageInterest : \"\"\r\n                    }\r\n                    name=\"mortgageInterest\"\r\n                    ref={register({\r\n                      required: mortgageEnabled,\r\n                      min: 0.1,\r\n                      max: 10,\r\n                      maxLength: 4,\r\n                      pattern: decimalPattern,\r\n                    })}\r\n                    readOnly={!mortgageEnabled}\r\n                    disabled={!mortgageEnabled}\r\n                    defaultValue={\r\n                      useDefaultInput ? defaultInput.mortgageInterest : \"\"\r\n                    }\r\n                  />\r\n                  <InputGroup.Append>\r\n                    <InputGroup.Text>%</InputGroup.Text>\r\n                  </InputGroup.Append>\r\n                  {errors.mortgageInterest && mortgageEnabled ? (\r\n                    <ErrorMessage text=\"0.10 - 10.00 %\" />\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </InputGroup>\r\n              </Col>\r\n            </Form.Group>\r\n\r\n            <div className=\"button-send\">\r\n              <Button\r\n                variant=\"info\"\r\n                type=\"submit\"\r\n                disabled={formState.isSubmitting}\r\n              >\r\n                Vypočítat\r\n              </Button>\r\n            </div>\r\n          </Form>\r\n        </div>\r\n      </Container>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default InputForm;\r\n","import React from \"react\";\r\n\r\nconst ResultsTableRow = (props) => {\r\n  const row = props.rowData.map((item, index) => {\r\n    return (\r\n      <td key={index} className={\"align-middle\"}>\r\n        {item}%\r\n      </td>\r\n    );\r\n  });\r\n  return (\r\n    <tr\r\n      key={props.monthlyRent}\r\n      className={\"table-cell-center \" + (props.bold ? \" table-cell-bold\" : \"\")}\r\n    >\r\n      <td className={\"table-cell-center align-middle\"}>\r\n        {props.monthlyRent}&nbsp;Kč\r\n      </td>\r\n      {row}\r\n    </tr>\r\n  );\r\n};\r\n\r\nconst ResultsTableBody = (props) => {\r\n  const rows = props.tableData.map((row, index) => {\r\n    return (\r\n      <ResultsTableRow\r\n        key={props.monthlyRent[index]}\r\n        rowData={row}\r\n        monthlyRent={props.monthlyRent[index]}\r\n        bold={index === 2 ? true : false}\r\n      />\r\n    );\r\n  });\r\n\r\n  return <tbody>{rows}</tbody>;\r\n};\r\n\r\nexport default ResultsTableBody;\r\n","import React from \"react\";\r\n\r\nconst ResultsTableHeader = (props) => {\r\n  return (\r\n    <thead>\r\n      <tr className=\"table-cell-center align-middle table-cell-bold\">\r\n        <th className=\"result-table-header\">Měsíční nájem</th>\r\n        <th className=\"result-table-header\">Čistý výnos investice p.a.</th>\r\n      </tr>\r\n    </thead>\r\n  );\r\n};\r\n\r\nexport default ResultsTableHeader;\r\n","import React from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport ResultsTableBody from \"./ResultsTableBody\";\r\nimport ResultsTableHeader from \"./ResultsTableHeader\";\r\n\r\nconst SummaryTable = (props) => {\r\n  const { monthlyMortgagePayment, monthlyNetRevenue, mortgagePeriod } =\r\n    props.tablesData;\r\n  const mortgageRevenueDelta = monthlyMortgagePayment - monthlyNetRevenue;\r\n\r\n  let descriptionsAndValues = [\r\n    {\r\n      description: \"Čistý měsíční příjem z nájmu: \",\r\n      value: monthlyNetRevenue + \" Kč\",\r\n    },\r\n  ];\r\n\r\n  const descriptionsAndValuesOnlyMortgage = [\r\n    {\r\n      description: \"Měsíční splátka hypotéky: \",\r\n      value: monthlyMortgagePayment + \" Kč po dobu \" + mortgagePeriod + \" let\",\r\n    },\r\n    {\r\n      description: \"Měsíční doplatek na hypotéku: \",\r\n      value: mortgageRevenueDelta + \" Kč po dobu \" + mortgagePeriod + \" let\",\r\n    },\r\n  ];\r\n\r\n  if (mortgagePeriod !== 0) {\r\n    descriptionsAndValues = descriptionsAndValues.concat(\r\n      descriptionsAndValuesOnlyMortgage\r\n    );\r\n  }\r\n\r\n  const rows = descriptionsAndValues.map((row, index) => {\r\n    return (\r\n      <tr key={index}>\r\n        <td className=\"align-middle\">{row.description}</td>\r\n        <td className=\"align-middle\">{row.value}</td>\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  return <tbody>{rows}</tbody>;\r\n};\r\n\r\nconst ResultsTable = (props) => {\r\n  const { rentInvestmentPeriodTable } = props.tablesData;\r\n\r\n  return (\r\n    <div>\r\n      <Table responsive>\r\n        <SummaryTable tablesData={props.tablesData} />\r\n      </Table>\r\n      <Table bordered striped hover responsive>\r\n        <ResultsTableHeader\r\n          headerData={rentInvestmentPeriodTable.investmentPeriod}\r\n        />\r\n        <ResultsTableBody\r\n          tableData={rentInvestmentPeriodTable.data}\r\n          monthlyRent={rentInvestmentPeriodTable.monthlyRent}\r\n        />\r\n      </Table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResultsTable;\r\n","import React, { Component } from \"react\";\r\nimport { Accordion, Card, Container } from \"react-bootstrap\";\r\nimport ResultsTable from \"./ResultsTable\";\r\n\r\nclass Results extends Component {\r\n  render() {\r\n    const dataLoaded = Object.keys(this.props.results).length !== 0;\r\n\r\n    return (\r\n      <Container className=\"results\" ref={this.tableRef}>\r\n        <div className=\"justify-content-center\">\r\n          <Accordion\r\n            className=\"resultsCard\"\r\n            activeKey={dataLoaded ? \"result\" : \"\"}\r\n          >\r\n            <Card>\r\n              <Accordion.Toggle as={Card.Header} eventKey=\"result\">\r\n                <b>Výsledek</b>\r\n              </Accordion.Toggle>\r\n              <Accordion.Collapse eventKey=\"result\">\r\n                <Card.Body>\r\n                  {dataLoaded ? (\r\n                    <ResultsTable tablesData={this.props.results} />\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </Card.Body>\r\n              </Accordion.Collapse>\r\n            </Card>\r\n          </Accordion>\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Results;\r\n","export const computeInvestmentResults = (inputData) => {\r\n  const resultsState = {};\r\n\r\n  //if mortgage is disabled\r\n  if (!inputData.mortgage) {\r\n    inputData.mortgageValue = 0;\r\n    inputData.mortgagePeriod = 0;\r\n    inputData.mortgageInterest = 0;\r\n    resultsState.monthlyMortgagePayment = 0;\r\n  } else {\r\n    //compute mothly mortgage payment\r\n    resultsState.monthlyMortgagePayment =\r\n      computeMonthlyMortgagePayment(inputData);\r\n  }\r\n\r\n  //compute monthly net revenue\r\n  resultsState.monthlyNetRevenue = computeMonthlyNetRevenue(inputData);\r\n\r\n  //TODO\r\n  //create table based on a rent and a period of investment.\r\n  //mortgage period + x years <= 50 in total; 5 years period;\r\n  resultsState.rentInvestmentPeriodTable = getRentInvestmentPeriodTable(\r\n    inputData,\r\n    resultsState.monthlyMortgagePayment\r\n  );\r\n\r\n  resultsState.mortgagePeriod = inputData.mortgagePeriod;\r\n\r\n  //round results\r\n  roundResults(resultsState);\r\n\r\n  return resultsState;\r\n};\r\n\r\n//compute monthly mortgage payment\r\nexport const computeMonthlyMortgagePayment = (inputData) => {\r\n  const yearlyInterest = parseFloat(inputData.mortgageInterest) / 100 / 12;\r\n  const mortgagePeriod = parseInt(inputData.mortgagePeriod, 10) * 12;\r\n  const mortgageValue = parseInt(inputData.mortgageValue, 10);\r\n\r\n  return (\r\n    mortgageValue *\r\n    (1 + yearlyInterest) ** mortgagePeriod *\r\n    (yearlyInterest / ((1 + yearlyInterest) ** mortgagePeriod - 1))\r\n  );\r\n};\r\n\r\n//compute monthly net revenue\r\nconst computeMonthlyNetRevenue = (inputData, monthlyRent) => {\r\n  if (monthlyRent === undefined) {\r\n    monthlyRent = parseInt(inputData.monthlyRent, 10);\r\n  }\r\n  const emptyMonths = parseFloat(inputData.emptyMonths, 10);\r\n  const homeMaintenance = parseInt(inputData.homeMaintenance, 10);\r\n  const monthlyExpenses = parseInt(inputData.monthlyExpenses, 10) / 100;\r\n\r\n  return (\r\n    (monthlyRent * (12 - emptyMonths) -\r\n      homeMaintenance -\r\n      monthlyRent * 12 * monthlyExpenses -\r\n      (monthlyRent * (12 - emptyMonths) -\r\n        monthlyRent * 12 * monthlyExpenses -\r\n        homeMaintenance -\r\n        30840) *\r\n        0.15) /\r\n    12\r\n  );\r\n};\r\n\r\n//prepare an array of cashflow per year (income - expenses).\r\n//Initial costs and property sale are inculded.\r\nconst prepareCashflow = (\r\n  inputData,\r\n  monthlyNetRevenue,\r\n  monthlyMortgagePayment,\r\n  investmentPeriod\r\n) => {\r\n  const cashflow = new Array(investmentPeriod);\r\n\r\n  const initialInvestment =\r\n    -inputData.initialMaintenance -\r\n    (inputData.propertyCost - inputData.mortgageValue);\r\n\r\n  const yearlyCashFlowMortgage =\r\n    12 * (monthlyNetRevenue - monthlyMortgagePayment);\r\n\r\n  const propertyValueIncreased =\r\n    parseFloat(inputData.propertyCost) * (1 + inputData.valueDevelopment / 100);\r\n\r\n  cashflow.fill(initialInvestment, 0, 1);\r\n  cashflow.fill(yearlyCashFlowMortgage, 1, inputData.mortgagePeriod + 1);\r\n  cashflow.fill(\r\n    monthlyNetRevenue * 12,\r\n    inputData.mortgagePeriod + 1,\r\n    investmentPeriod\r\n  );\r\n  if (inputData.mortgagePeriod < investmentPeriod) {\r\n    cashflow.push(propertyValueIncreased + 12 * monthlyNetRevenue);\r\n  } else {\r\n    cashflow.push(propertyValueIncreased + yearlyCashFlowMortgage);\r\n  }\r\n\r\n  return cashflow;\r\n};\r\n\r\n//compute net present value = a value of future money in today's perspective\r\nconst getNPV = (cashflow, irr) =>\r\n  cashflow.reduce((acc, val, i) => acc + val / Math.pow(1 + irr, i), 0);\r\n\r\nconst computeIRR = (cashflow) => {\r\n  const maxTries = 100000;\r\n  const delta = 0.00001;\r\n  let guess = 0.01; //Initial guess\r\n  const multiplier = getNPV(cashflow, guess) > 0 ? 1 : -1;\r\n  let i = 0;\r\n  while (i < maxTries) {\r\n    const guessedNPV = getNPV(cashflow, guess);\r\n    if (multiplier * guessedNPV > delta) {\r\n      guess += multiplier * delta;\r\n      i += 1;\r\n    } else break;\r\n  }\r\n  //console.log(`Found IRR = ${guess} in ${i} trials`);\r\n  return guess;\r\n};\r\n\r\n//monthlyRent -> + 500, 5 rows -> -1000, - 500, x (bold), +500, +1000\r\n//Compute yearly profit for various monthly rent and a given investment period.\r\nconst getRentInvestmentPeriodTable = (inputData, monthlyMortgagePayment) => {\r\n  const table = {\r\n    data: [],\r\n    monthlyRent: [],\r\n    investmentPeriod: [],\r\n  };\r\n  const investmentPeriodSet = new Set();\r\n  const monthlyRentTop = parseInt(inputData.monthlyRent, 10) + 1000;\r\n  for (\r\n    let monthlyRent = parseInt(inputData.monthlyRent, 10) - 1000;\r\n    monthlyRent <= monthlyRentTop;\r\n    monthlyRent += 500\r\n  ) {\r\n    const row = [];\r\n    table.monthlyRent.push(monthlyRent);\r\n    const monthlyNetRevenue = computeMonthlyNetRevenue(inputData, monthlyRent);\r\n\r\n    let investmentPeriod = parseInt(inputData.investmentPeriod, 10);\r\n    const cashflow = prepareCashflow(\r\n      inputData,\r\n      monthlyNetRevenue,\r\n      monthlyMortgagePayment,\r\n      investmentPeriod\r\n    );\r\n    const irr = computeIRR(cashflow);\r\n\r\n    row.push(Number(irr * 100).toFixed(2));\r\n    investmentPeriodSet.add(inputData.investmentPeriod);\r\n\r\n    table.data.push(row);\r\n  }\r\n  table.investmentPeriod = Array.from(investmentPeriodSet);\r\n\r\n  return table;\r\n};\r\n\r\nexport const roundResults = (resultsState) => {\r\n  resultsState.monthlyMortgagePayment = Number(\r\n    resultsState.monthlyMortgagePayment\r\n  ).toFixed();\r\n  resultsState.monthlyNetRevenue = Number(\r\n    resultsState.monthlyNetRevenue\r\n  ).toFixed();\r\n\r\n  return resultsState;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport Header from \"./header/Header\";\r\n\r\nimport InputForm from \"./inputForm/InputForm\";\r\nimport Results from \"./results/Results\";\r\nimport { computeInvestmentResults } from \"./utils/Math.js\";\r\n\r\nimport { Container } from \"react-bootstrap\";\r\n\r\nimport \"./index.css\";\r\n\r\nconst App = () => {\r\n  const [results, setResults] = useState({});\r\n  const [mortgageEnabled, setMortgageEnabled] = useState(true);\r\n\r\n  //Use for debugging\r\n  const useDefaultFormInput = false;\r\n\r\n  const defaultFormInput = {\r\n    investmentPeriod: 30,\r\n    propertyCost: 5000000,\r\n    initialMaintenance: 100000,\r\n    monthlyRent: 14000,\r\n    monthlyExpenses: 30,\r\n    emptyMonths: 1.0,\r\n    homeMaintenance: 5000,\r\n    valueDevelopment: 50,\r\n    mortgageValue: 4000000,\r\n    mortgagePeriod: 30,\r\n    mortgageInterest: 3.7,\r\n  };\r\n\r\n  const toggleMortgage = (event) => {\r\n    setMortgageEnabled(event.target.checked);\r\n  };\r\n\r\n  const onSubmit = (inputData) => {\r\n    const resultsState = computeInvestmentResults(inputData);\r\n\r\n    setResults(resultsState);\r\n  };\r\n\r\n  return (\r\n    <Container fluid className=\"main-container\">\r\n      <Header />\r\n      <InputForm\r\n        onSubmit={onSubmit}\r\n        toggleMortgage={toggleMortgage}\r\n        mortgageEnabled={mortgageEnabled}\r\n        defaultFormInput={defaultFormInput}\r\n        useDefaultFormInput={useDefaultFormInput}\r\n      />\r\n      <div>\r\n        <Results results={results} />\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}